name: CI â€” branch tests

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  backend-tests:
    name: Backend tests (Python)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('server/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r server/requirements.txt -r server/requirements-dev.txt

      - name: Run backend tests
        working-directory: server
        run: |
          pytest

      - name: Upload pytest cache (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-cache
          path: server/.pytest_cache

  frontend-tests:
    name: Frontend tests (optional)
    runs-on: ubuntu-latest
    container:
      image: node:20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests 
        run: |
          cd frontend
          npm test

  build-cache:
    name: Build Docker images (cache)
    runs-on: ubuntu-latest
    outputs:
      server_tags: ${{ steps.tag_vars.outputs.server_tags }}
      frontend_tags: ${{ steps.tag_vars.outputs.frontend_tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Compute image tags
        id: tag_vars
        run: |
          # default to SHA tag
          server_tags="jclass/stroptimise-server:${GITHUB_SHA}"
          frontend_tags="jclass/stroptimise-frontend:${GITHUB_SHA}"

          # Add branch tags for actual push events, otherwise tag as :local for local/PR runs
          if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            branch_ref="$GITHUB_REF"
            branch_name="${branch_ref#refs/heads/}"
            if [ "$branch_name" = "develop" ]; then
              server_tags+=",jclass/stroptimise-server:develop"
              frontend_tags+=",jclass/stroptimise-frontend:develop"
            elif [ "$branch_name" = "main" ]; then
              server_tags+=",jclass/stroptimise-server:latest"
              frontend_tags+=",jclass/stroptimise-frontend:latest"
            else
              # (local with act, pull_request, etc.) should be tagged locally
              server_tags+=",jclass/stroptimise-server:local"
              frontend_tags+=",jclass/stroptimise-frontend:local"
            fi
          fi

          echo "server_tags=$server_tags" >> $GITHUB_OUTPUT
          echo "frontend_tags=$frontend_tags" >> $GITHUB_OUTPUT
      - name: Build server image (cache-to)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/Dockerfile
          push: false
          tags: ${{ steps.tag_vars.outputs.server_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image (cache-to)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: false
          tags: ${{ steps.tag_vars.outputs.frontend_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-images:
    name: Publish images (after tests)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, build-cache]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Hub secrets
        if: ${{ github.event_name == 'push' }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "Required Docker Hub secrets DOCKER_USERNAME or DOCKER_PASSWORD are missing." >&2
            exit 1
          fi

      - name: Log in to Docker Hub
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push server image (reuse cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: server/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ needs.build-cache.outputs.server_tags }}
          cache-from: type=gha

      - name: Push frontend image (reuse cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ needs.build-cache.outputs.frontend_tags }}
          cache-from: type=gha
